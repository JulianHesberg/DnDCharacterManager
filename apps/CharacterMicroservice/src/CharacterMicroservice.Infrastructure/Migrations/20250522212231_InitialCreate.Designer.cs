// <auto-generated />
using CharacterMicroservice.Infrastructure.Presistance.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharacterMicroservice.Infrastructure.Migrations
{
    [DbContext(typeof(CharacterDbContext))]
    [Migration("20250522212231_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CharacterMicroservice.Domain.Models.Entity.Write.CharacterItems", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterItems");
                });

            modelBuilder.Entity("CharacterMicroservice.Domain.Models.Entity.Write.CharacterNotes", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NoteId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterNotes");
                });

            modelBuilder.Entity("CharacterMicroservice.Domain.Models.Entity.Write.CharacterSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Race")
                        .HasColumnType("int");

                    b.Property<int>("SkillPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CharacterSheets");
                });

            modelBuilder.Entity("CharacterMicroservice.Domain.Models.Entity.Write.CharacterSkills", b =>
                {
                    b.Property<string>("SkillId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterSkills");
                });

            modelBuilder.Entity("CharacterMicroservice.Domain.Models.Entity.Write.CharacterItems", b =>
                {
                    b.HasOne("CharacterMicroservice.Domain.Models.Entity.Write.CharacterSheet", null)
                        .WithMany("Items")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterMicroservice.Domain.Models.Entity.Write.CharacterNotes", b =>
                {
                    b.HasOne("CharacterMicroservice.Domain.Models.Entity.Write.CharacterSheet", null)
                        .WithMany("Notes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterMicroservice.Domain.Models.Entity.Write.CharacterSkills", b =>
                {
                    b.HasOne("CharacterMicroservice.Domain.Models.Entity.Write.CharacterSheet", null)
                        .WithMany("Skills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterMicroservice.Domain.Models.Entity.Write.CharacterSheet", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Notes");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
